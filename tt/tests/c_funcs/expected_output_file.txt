/**
 * main() - $PLACEHOLDER
 * @argc:   $PLACEHOLDER
 * @argv[]: $PLACEHOLDER
 *
 * $PLACEHOLDER
 * Returns int: $PLACEHOLDER
 */
int main(int argc, char *argv[]) {}

/**
 * func() - $PLACEHOLDER
 * @x: $PLACEHOLDER
 * @y: $PLACEHOLDER
 *
 * $PLACEHOLDER
 * Returns int: $PLACEHOLDER
 */
static inline int func(int x, int y) {}

/**
 * voidFunc:$PLACEHOLDER
 *
 * $PLACEHOLDER
 */
static void voidFunc();

/**
 * intFunc() - $PLACEHOLDER
 *
 * $PLACEHOLDER
 * Returns unsigned int: $PLACEHOLDER
 */
unsigned int
intFunc(void) {}

/**
 * string_equal() - $PLACEHOLDER
 * @str1: $PLACEHOLDER
 * @s2:   $PLACEHOLDER
 *
 * $PLACEHOLDER
 * Returns bool: $PLACEHOLDER
 */
bool string_equal(const char *str1, const char *s2);

/**
 * funcReturningFp() - $PLACEHOLDER
 *
 * $PLACEHOLDER
 * Returns (*fp): $PLACEHOLDER
 */
(*fp) funcReturningFp(void);

/**
 * funcReturningFp() - $PLACEHOLDER
 * @p1: $PLACEHOLDER
 * @p2: $PLACEHOLDER
 *
 * $PLACEHOLDER
 * Returns (*fp): $PLACEHOLDER
 */
(*fp) funcReturningFp(*(*fp) p1, *(*fp) p2);

/**
 * string_func() - $PLACEHOLDER
 * @x:        $PLACEHOLDER
 * @str:      $PLACEHOLDER
 * @[double]: $PLACEHOLDER
 *
 * $PLACEHOLDER
 * Returns char **: $PLACEHOLDER
 */
char **
string_func(
		int x,
		char *str,
		double,
	   )
{}

// vim: ft=c
